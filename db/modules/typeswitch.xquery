xquery version "3.1";

module namespace app="http://exist-db.org/apps/tryerror/templates";
declare default element namespace "http://www.tei-c.org/ns/1.0";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/tryerror/config" at "config.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute data-template="app:test" 
 : or class="app:test" (deprecated). The function has to take at least 2 default
 : parameters. Additional parameters will be mapped to matching request or session parameters.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};

declare function app:tei2html($nodes as node()*) {
    
(:    let $data := collection('/db/apps/tryerror/data'):)
(:    for $document in $data:)
(:        let $uri := util:unescape-uri(replace(base-uri($document), '.+/(.+).xml$', '$1'), 'UTF-8'):)
(:    for $chapter in $document//div[@type = 'chapter']:)
(:        let $id := string($chapter/@xml:id):)
    let $version := "regL"
    
    for $node in $nodes
    return
        typeswitch($node)
        
            case text() return
                $node
                
            case element (body) return
                let $data := collection('/db/apps/tryerror/data')
                for $document in $data
                    let $uri := util:unescape-uri(replace(base-uri($document), '.+/(.+).xml$', '$1'), 'UTF-8')
                    return
                    <div id="{concat($uri,$version)}" class="GWL">{ app:tei2html($node/node()) }</div>
                
            case element (div) return
                <div>
                {if ($node/@type='chapter') then
                    let $id := string($node/@xml:id)
                    return
                    <div id="{concat($id,$version)}" class="chapterL" style="display:none">{ app:tei2html($node/node()) }</div>
                else (), app:tei2html($node/node())}
                </div>
                
            case element (lg) return 
                <div class="lg">{ app:tei2html($node/node()) }</div>
                
            case element (l) return
                <p>
                    <div class="row">
                        <div id="line" class="col-sm-2">{ $node/@* }</div>
                        <div id="text" class="col-sm-10">{ app:tei2html($node/node()) }</div>
                    </div>
                </p>
                
            case element(ref) return <a>{ $node/(@*|node()) }</a>
            case element() return
                app:tei2html($node/node())
            default return
                $node/string()
        
};

declare function app:view($node as node(), $model as map(*)) {
    let $data := collection('/db/apps/tryerror/data')
    for $document in $data
    for $body in $document//body
    let $store := $body
    
    return
        <div> {app:tei2html($store)} </div>
};